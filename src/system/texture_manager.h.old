#ifndef BOMBER_TEXTURE_MANAGER_H
#define BOMBER_TEXTURE_MANAGER_H

#include <stdlib.h>

#include <util/counted_list.h>
#include "opengl.h"

#define TEX_SELECT 0

typedef struct {
    /** Id of the texture. */
    GLuint m_tex_id;
    /** Texture unit. */
    GLenum m_texture_unit;
} tex_t;

// todo cannot be used with embedded resources
int create_tex_from_file(tex_t *t_tex, const char *t_tex_file, GLenum t_texture_unit);

int create_tex_from_mem(
        tex_t *t_tex, const char *t_tex_data, size_t t_tex_len, GLenum t_texture_unit,
        uint32_t t_channel_count
);

int bind_tex(tex_t *t_tex);

/**
 * Unbinds the current texture.
 */
int unbind_tex();

int delete_tex(tex_t *t_tex);

/**
 * Specified manually based on identifiers in CMakeLists.
 */
extern const char select_png[];
extern const size_t select_png_len;

typedef struct {
    /** manually specified identifier, used to request the texture */
    uint32_t m_id;
    /** pointers to extern embedded data */
    const char *m_data;
    const size_t *m_len;
    /** properties of the texture, need to be manually defined */
    uint32_t m_channel_count;
} tex_res_t;

/** Array to obtain the desired data using an id. */
static const tex_res_t TEXTURE_RESOURCES[] = {
        {.m_id=TEX_SELECT, .m_data=select_png, .m_len=&select_png_len, .m_channel_count=3}
};

static const size_t TEXTURE_COUNT = 10;

clist_t texture_list;

int initialize_texture_manager();

int cleanup_texture_manager();

/** Returns a texture in {@param t_texture} based on {@param t_tex_id} from TEXTURE_RESOURCES. */
int request_texture(tex_t *t_texture, uint32_t t_tex_id);

/** @private Creates a texture in {@param t_texture} based on {@param t_tex_id} from TEXTURE_RESOURCES. */
int create_tex_from_resource(tex_t *t_texture, uint32_t t_tex_id);

/** @private Deletes a texture in {@param t_texture} based on {@param t_tex_id} from TEXTURE_RESOURCES. */
int delete_tex_from_resource(tex_t *t_texture, uint32_t t_tex_id);

#endif //BOMBER_TEXTURE_MANAGER_H
